{"name":"Symmetric-encryption","tagline":"Symmetric Encryption for Ruby Projects using OpenSSL ","body":"symmetric-encryption [![Build Status](https://secure.travis-ci.org/reidmorrison/symmetric-encryption.png?branch=master)](http://travis-ci.org/reidmorrison/symmetric-encryption)\r\n====================\r\n\r\n* http://github.com/reidmorrison/symmetric-encryption\r\n\r\n## Introduction\r\n\r\nAny project that wants to meet PCI compliance has to ensure that the data is encrypted\r\nwhilst in flight and at rest. Amongst many other other requirements all passwords\r\nin configuration files have to be encrypted\r\n\r\nThis Gem helps achieve compliance by supporting encryption of data in a simple\r\nand consistent way\r\n\r\nSymmetric Encryption uses OpenSSL to encrypt and decrypt data, and can therefore\r\nexpose all the encryption algorithms supported by OpenSSL.\r\n\r\n## Security\r\n\r\nMany solutions that encrypt data require the encryption keys to be stored in the\r\napplications source code or leave it up to the developer to secure the keys on\r\nthe application servers. symmetric-encryption takes care of securing the\r\nsymmetric encryption keys.\r\n\r\nThe following steps are used to secure the symmetric encryption keys using symmetric-encryption:\r\n\r\n* Symmetric Encryption keys are stored in files that are not part of the application,\r\nits source code, or even stored in its source control system. These files can be\r\ncreated, managed and further secured by System Administrators. This prevents\r\ndevelopers having or needing to have access to the symmetric encryption keys\r\n* The Operating System security features limit access to the Symmetric Encryption\r\nkey files to System Administrators and the userid under which the Rails application runs.\r\n* The files in which the Symmetric Encryption keys are stored are further\r\nencrypted using RSA 2048 bit encryption\r\n\r\nIn order for anyone to decrypt the data being encrypted in the database, they\r\nwould need access to ALL of the following:\r\n* A copy of the files containing the Symmetric Encryption Keys which are secured\r\nby the Operating System\r\n* The application source code containing the RSA private key to decrypt the above files\r\n* The userid and password for the database to copy the encrypted data itself,\r\nor an unsecured copy or export of the database contents\r\n\r\nA major feature of symmetric encryption is that it makes the encryption and decryption\r\nautomatically available when the Rails application is started. This includes all\r\nrake tasks and the Rails console. In this way data can be encrypted or decrypted as\r\npart of any rake task.\r\n\r\nFrom a security perspective it is important then to properly secure the system so that\r\nno hacker can switch to and run as the rails user and thereby gain access to the\r\nencryption and decryption capabilities\r\n\r\nIt is not necessary to encrypt the IV (initialization vector), and it can be placed\r\ndirectly in the configuration file. The encryption key must be kept secure and\r\nmust never be placed in the configuration file or other Rails source file in production.\r\nThe IV should be generated using the rails generator described below to ensure\r\nit is a truly random key from the key space.\r\n\r\n## Limitations\r\n\r\nBy default symmetric encryption uses the same initialization vector (IV) and\r\nencryption key to encrypt data using the SymmetricEncryption.encrypt call.\r\nThis technique is required in cases where the encrypted data is used as a key\r\nto lookup for example a Social Security Number, since for the same input data it\r\nmust always return the same encrypted result. The drawback is that this\r\ntechnique is not considered secure when encypting large amounts of data.\r\n\r\nFor non-key fields, such as storing encrypted raw responses,\r\nuse the :random_iv => true option where possible so that a\r\nrandomly generated IV is used and included in every encrypted string.\r\n\r\nThe Symmetric Encryption streaming interface SymmetricEncryption::Writer avoids this\r\nproblem by using a random IV and key in every file/stream by default.\r\nThe random IV and key are stored in the header of the output stream so that it\r\nis available when reading back the encrypted file/stream. The key is placed\r\nin a header on the file in encrypted form using the current global key/cipher.\r\n\r\nThe ActiveRecord attr_encrypted method supports the :random_iv => true option.\r\nSimilarly for MongoMapper and Mongoid the :random_iv => true option can be added.\r\n\r\nNote that encrypting the same input string with the same key and :random_iv => true\r\noption will result in different encrypted output every time it is encrypted.\r\n\r\n## Features\r\n\r\n* Encryption of passwords in configuration files\r\n* Encryption of ActiveRecord model attributes by prefixing attributes / column\r\n  names with encrypted_\r\n* Encryption of MongoMapper keys by using :encrypted_key\r\n* Encryption of Mongoid model fields by adding :encrypted option to field\r\n  definitions\r\n* Externalization of symmetric encryption keys so that they are not in the\r\n  source code, or the source code control system\r\n* Validator for ActiveRecord Models to ensure fields contain encrypted data\r\n* Stream based encryption and decryption so that large files can be read or\r\n  written with encryption, along with a random key and IV for every file\r\n* Stream based encryption and decryption also supports compression and decompression\r\n  on the fly\r\n* When :compress => true option is specified Symmetric Encryption will transparently\r\n  compress the data prior to decryption. When decrypting compressed data Symmetric\r\n  Encryption will transparently decompress the data after decryption based on the\r\n  header stored in the encrypted data\r\n* Uses built-in support in Ruby for OpenSSL and Zlib for high performance and\r\n  maximum portability without introducing any additional dependencies\r\n* Drop in replacement for attr_encrypted. Just remove the attr_encrypted gem\r\n* For maximum security supports fully random keys and initialization vectors\r\n  extracted from the entire encryption key space\r\n\r\n## Recommendations\r\n\r\n* Add the encryption header to all encrypted strings.\r\n  See the _always_add_header_ option in the configuration file.\r\n\r\n* Add `random_iv: true` for all ActiveRecord attributes, MongoMapper keys, and\r\n  Mongoid fields which are not used in indexes and will not be used as part of a query.\r\n\r\n## Binary Data\r\n\r\nOn decryption an attempt is made to encode the data as UTF-8, if it fails it\r\nwill be returned as BINARY encoded.\r\n\r\n## Examples\r\n\r\n### Encryption Example\r\n\r\n```ruby\r\nSymmetricEncryption.encrypt \"Sensitive data\"\r\n```\r\n\r\n### Decryption Example\r\n\r\n```ruby\r\nSymmetricEncryption.decrypt \"JqLJOi6dNjWI9kX9lSL1XQ==\\n\"\r\n```\r\n\r\n### ActiveRecord Example\r\n\r\n```ruby\r\nclass User < ActiveRecord::Base\r\n  # Requires table users to have a column called encrypted_bank_account_number\r\n  attr_encrypted :bank_account_number\r\n\r\n  # Requires users table to have a column called encrypted_social_security_number\r\n  #\r\n  # Note: Encrypting the same value twice will result in the _same_ encrypted value\r\n  #       when :random_iv => false, or is not specified\r\n  attr_encrypted :social_security_number\r\n\r\n  # By specifying the type as :integer the value will be returned as an integer and\r\n  # can be set as an integer, even though it is stored in the database as an\r\n  # encrypted string\r\n  #\r\n  # Requires users table to have a column called encrypted_age of type string\r\n  attr_encrypted :age,         type: integer\r\n\r\n  # Since string and long_string are not used in the where clause of any SQL\r\n  # queries it is better to ensure that the encrypted value is always different\r\n  # by encrypting every value with a random Initialization Vector.\r\n  #\r\n  # Note: Encrypting the same value twice will result in different encrypted\r\n  #       values when :random_iv is true\r\n  attr_encrypted :string,      random_iv: true\r\n\r\n  # Long encrypted strings can also be compressed prior to encryption to save\r\n  # disk space\r\n  attr_encrypted :long_string, random_iv: true, compress: true\r\n\r\n  # By specifying the type as :json the value will be serialized to JSON\r\n  # before encryption and deserialized from JSON after decryption.\r\n  #\r\n  # It is sometimes useful to use compression on large fields, so we can enable\r\n  # compression before the string is encrypted\r\n  #\r\n  # Requires users table to have a column called encrypted_values of type string\r\n  attr_encrypted :values,      type: :json, compress: true\r\n\r\n  validates :encrypted_bank_account_number, symmetric_encryption: true\r\n  validates :encrypted_social_security_number, symmetric_encryption: true\r\nend\r\n\r\n# Create a new user instance assigning a bank account number\r\nuser = User.new\r\nuser.bank_account_number = '12345'\r\n\r\n# Saves the bank_account_number in the column encrypted_bank_account_number in\r\n# encrypted form\r\nuser.save!\r\n\r\n# Short example using create\r\nUser.create(bank_account_number: '12345')\r\n```\r\n\r\nSeveral types are supported for ActiveRecord models when encrypting or decrypting data.\r\nEach type maps to the built-in Ruby types as follows:\r\n\r\n- :string    => String\r\n- :integer   => Integer\r\n- :float     => Float\r\n- :decimal   => BigDecimal\r\n- :datetime  => DateTime\r\n- :time      => Time\r\n- :date      => Date\r\n- :json      => Uses JSON serialization, useful for hashes and arrays\r\n- :yaml      => Uses YAML serialization, useful for hashes and arrays\r\n\r\n### MongoMapper Example\r\n\r\nTo encrypt a field in a MongoMapper document, use `encrypted_key` instead of `key`\r\nwhen specifying a key.\r\n\r\n```ruby\r\n  field :encrypted_age,                    type: String, encrypted: {type: :integer}\r\nend\r\n\r\n# User model MongoMapper\r\nclass User\r\n  include MongoMapper::Document\r\n\r\n  key           :name,                   String\r\n  encrypted_key :bank_account_number,    String\r\n  encrypted_key :social_security_number, String\r\n  encrypted_key :life_history,           String, encrypted: { random_iv: true, compress: true }\r\n\r\n  # Encrypted fields are _always_ stored in Mongo as a String\r\n  # To get the result back as an Integer, Symmetric Encryption will automatically\r\n  # perform the necessary conversions\r\n  encrypted_key :integer_value,          Integer\r\n  encrypted_key :float_value,            Float\r\n  encrypted_key :decimal_value,          BigDecimal\r\n  encrypted_key :datetime_value,         DateTime\r\n  encrypted_key :time_value,             Time\r\n  encrypted_key :date_value,             Date\r\n  encrypted_key :true_value,             Boolean\r\n  encrypted_key :data_json,              Hash, encrypted: {random_iv: true, compress: true}\r\n  # By default Hash is saved as JSON, to save as YAML add the type specifier:\r\n  encrypted_key :data_yaml,              Hash, encrypted: {random_iv: true, compress: true, type: :yaml}\r\n\r\n  # Optionally add validation to ensure that encrypted fields are in fact encrypted\r\n  # before the data is saved\r\n  validates :encrypted_bank_account_number,    symmetric_encryption: true\r\n  validates :encrypted_social_security_number, symmetric_encryption: true\r\nend\r\n\r\n# Create a new user document\r\nUser.create(bank_account_number: '12345')\r\n\r\n# When finding a document, always use the encrypted form of the field name\r\nuser = User.where(encrypted_bank_account_number: SymmetricEncryption.encrypt('12345')).first\r\n\r\n# Fields can be accessed using their unencrypted names\r\nputs user.bank_account_number\r\n```\r\n\r\n### Mongoid Example\r\n\r\nTo encrypt a field in a Mongoid document, just add \"encrypted: true\" at the end\r\nof the field specifier. The field name must currently begin with \"encrypted_\"\r\n\r\n```ruby\r\n# User model in Mongoid\r\nclass User\r\n  include Mongoid::Document\r\n\r\n  field :name,                             type: String\r\n  field :encrypted_bank_account_number,    type: String,  encrypted: true\r\n  field :encrypted_social_security_number, type: String,  encrypted: true\r\n  field :encrypted_life_history,           type: String,  encrypted: {compress: true, random_iv: true}\r\n\r\n  # Encrypted fields are _always_ stored in Mongo as a String\r\n  # To get the result back as an Integer, Symmetric Encryption can do the\r\n  # necessary conversions by specifying the internal type as an option\r\n  # to :encrypted\r\n  # #see SymmetricEncryption::COERCION_TYPES for full list of types\r\n  field :encrypted_age,                    type: String, encrypted: {type: :integer}\r\nend\r\n\r\n# Create a new user document\r\nUser.create(bank_account_number: '12345')\r\n\r\n# When finding a document, always use the encrypted form of the field name\r\nuser = User.where(encrypted_bank_account_number: SymmetricEncryption.encrypt('12345')).first\r\n\r\n# Fields can be accessed using their unencrypted names\r\nputs user.bank_account_number\r\n```\r\n\r\n### Validation Example\r\n\r\n```ruby\r\nclass MyModel < ActiveRecord::Base\r\n  validates :encrypted_ssn, symmetric_encryption: true\r\nend\r\n\r\nm = MyModel.new\r\nm.valid?\r\n#  => false\r\nm.encrypted_ssn = SymmetricEncryption.encrypt('123456789')\r\nm.valid?\r\n#  => true\r\n```\r\n### Encrypting Passwords in configuration files\r\n\r\nPasswords can be encrypted in any YAML configuration file.\r\n\r\nFor example config/database.yml\r\n\r\n```yaml\r\n---\r\nproduction:\r\n  adapter:  mysql\r\n  host:     db1w\r\n  database: myapp_production\r\n  username: admin\r\n  password: <%= SymmetricEncryption.try_decrypt \"JqLJOi6dNjWI9kX9lSL1XQ==\\n\" %>\r\n```\r\n\r\nNote: Use SymmetricEncryption.try_decrypt method which will return nil if it\r\n  fails to decrypt the value, which is essential when the encryption keys differ\r\n  between environments\r\n\r\nNote: In order for the above technique to work in other YAML configuration files\r\n  the YAML file must be processed using ERB prior to passing to YAML. For example\r\n\r\n```ruby\r\n    config_file = Rails.root.join('config', 'redis.yml')\r\n    raise \"redis config not found. Create a config file at: config/redis.yml\" unless config_file.file?\r\n\r\n    cfg = YAML.load(ERB.new(File.new(config_file).read).result)[Rails.env]\r\n    raise(\"Environment #{Rails.env} not defined in redis.yml\") unless cfg\r\n```\r\n\r\n### Large File Encryption\r\n\r\nExample: Read and decrypt a line at a time from a file\r\n\r\n```ruby\r\nSymmetricEncryption::Reader.open('encrypted_file') do |file|\r\n  file.each_line do |line|\r\n\t puts line\r\n  end\r\nend\r\n```\r\n\r\nExample: Encrypt and write data to a file\r\n\r\n```ruby\r\nSymmetricEncryption::Writer.open('encrypted_file') do |file|\r\n  file.write \"Hello World\\n\"\r\n  file.write \"Keep this secret\"\r\nend\r\n```\r\n\r\nExample: Compress, Encrypt and write data to a file\r\n\r\n```ruby\r\nSymmetricEncryption::Writer.open('encrypted_compressed.zip', compress: true) do |file|\r\n  file.write \"Hello World\\n\"\r\n  file.write \"Compress this\\n\"\r\n  file.write \"Keep this safe and secure\\n\"\r\nend\r\n```\r\n\r\n### Standalone test\r\n\r\nBefore generating keys we can use SymmetricEncryption in a standalone test environment:\r\n\r\n```ruby\r\n# Use test encryption keys\r\nSymmetricEncryption.cipher = SymmetricEncryption::Cipher.new(\r\n  key:         '1234567890ABCDEF1234567890ABCDEF',\r\n  iv:          '1234567890ABCDEF',\r\n  cipher_name: 'aes-128-cbc'\r\n)\r\nencrypted = SymmetricEncryption.encrypt('hello world')\r\nputs SymmetricEncryption.decrypt(encrypted)\r\n```\r\n\r\n### Rake Tasks\r\n\r\nFor PCI compliance developers should not be the ones creating or encrypting\r\npasswords. The following rake tasks can be used by system administrators to\r\ngenerate and encrypt passwords for databases, or external web calls.\r\nIt is safe to pass the encrypted password for say MySQL to the developers\r\nwho can then put it in the config files which are kept in source control.\r\n\r\nGenerate a random password and display its encrypted form:\r\n\r\n    rake symmetric_encryption:random_password\r\n\r\nEncrypt a known value, such as a password:\r\n\r\n    rake symmetric_encryption:encrypt\r\n\r\nNote: Passwords must be encrypted in the environment in which they will be used.\r\n  Since each environment should have its own symmetric encryption keys\r\n\r\nNote: To use the rake task 'symmetric_encryption:encrypt' the gem 'highline'\r\n  must first be installed by adding to bundler or installing directly:\r\n\r\n```ruby\r\ngem install 'highline'\r\n```\r\n\r\nEncrypt a file\r\n\r\n    INFILE=\"Gemfile.lock\" OUTFILE=\"Gemfile.lock.encrypted\" rake symmetric_encryption:encrypt_file\r\n\r\nEncrypt and compress a file\r\n\r\n    INFILE=\"Gemfile.lock\" OUTFILE=\"Gemfile.lock.encrypted\" COMPRESS=1 rake symmetric_encryption:encrypt_file\r\n\r\nDecrypt a file encrypted and optionally compressed using symmetric encryption\r\n\r\n    INFILE=\"Gemfile.lock.encrypted\" OUTFILE=\"Gemfile.lock2\" rake symmetric_encryption:decrypt_file\r\n\r\nWhen decrypting a compressed file it is not necessary to specify whether the file was compressed\r\nsince the header embedded in the file will indicate whether it was compressed\r\n\r\nThe file header also contains a random key and iv used to encrypt the files contents.\r\nThe key and iv is encrypted with the global encryption key being used by the symmetric\r\nencryption installation.\r\n\r\n## Dependencies\r\n\r\n- Ruby 1.9.3 (or above) Or, JRuby 1.7.3 (or above)\r\n- Optional: To log to MongoDB, Mongo Ruby Driver 1.5.2 or above\r\n\r\n## Installation\r\n\r\n### Add to an existing Rails project\r\nAdd the following line to Gemfile\r\n\r\n```ruby\r\ngem 'symmetric-encryption'\r\n```\r\n\r\nInstall the Gem with bundler\r\n\r\n    bundle install\r\n\r\n## Rails Configuration\r\n\r\nIf deploying to Heroku skip to the section \"Rails Configuration for a Heroku deployment\" below\r\n\r\n### Creating the configuration file\r\n\r\nThe configuration file contains the path to the production encryption key files.\r\nGenerally in development and test the files are not created, so supply the full path\r\nto these files in production. Once the config file has been generated it can be\r\nmodified as needed.\r\n\r\nGenerate the configuration file:\r\n\r\n    rails generate symmetric_encryption:config /etc/rails/keys\r\n\r\nNote: Ignore the warning about \"Symmetric Encryption config not found\" since it is\r\nbeing generated\r\n\r\n#### Save to version control\r\n\r\nThis configuration file should be checked into the source code control system.\r\nIt does Not include the Symmetric Encryption keys. They will be generated in the\r\nnext step.\r\n\r\n### Generating and securing the Symmetric Encryption keys\r\n\r\nOnce development and testing is complete we need to generate secure encryption\r\nkey files for production. It is recommended that the step below be run on only\r\none of the production servers. The generated key files must then be copied to\r\nall the production web servers.\r\n\r\nNote: Do not run this step more than once, otherwise new keys will be generated\r\nand any encrypted data will no longer be accessible.\r\n\r\nNote: Do not run this step on more than one server in each environment otherwise\r\neach server will be encrypting with it's own key and the servers will not be able\r\nto decrypt data encrypted on another server. Just copy the generated files to each\r\nserver\r\n\r\nThe symmetric encryption key consists of the key itself and an optional\r\ninitialization vector.\r\n\r\nTo generate the keys run the following Rake task once only in each environment:\r\n\r\n    rails generate symmetric_encryption:new_keys production\r\n\r\nReplace 'production' as necessary for each environment.\r\n\r\nMake sure that the current user has read and write access to the folder listed\r\nin the config file option key_filename.\r\n\r\nNote: Ignore the warning about the key files \"not found or readable\" since they\r\nare being generated\r\n\r\nOnce the Symmetric Encryption keys have been generated, secure them further by\r\nmaking the files read-only to the Rails user and not readable by any other user.\r\nChange ownership of the keys to the rails user and only give it access to read the key files:\r\n\r\n    chown rails /etc/rails/keys/*\r\n    chmod 0400 /etc/rails/keys/*\r\n\r\nChange 'rails' above to the userid under which your Rails processes are run\r\nand update the path to the one supplied when generating the config file or\r\nlook in the config file itself\r\n\r\nWhen running multiple Rails servers in a particular environment copy the same\r\nkey files to every server in that environment. I.e. All Rails servers in each\r\nenvironment must run the same encryption keys.\r\n\r\nNote: The generate step above must only be run once in each environment\r\n\r\n## Rails Configuration for a Heroku deployment\r\n\r\nDeploying to Heroku requires the encrypted key to be stored in an environment\r\nvariable rather than as a file on disk.\r\n\r\nGenerate the configuration file:\r\n\r\n    rails g symmetric_encryption:heroku_config\r\n\r\nNote: Ignore the warning about \"Symmetric Encryption config not found\" since it is\r\nbeing generated.\r\n\r\nNote: The encrypted keys for the release and production environments are displayed on\r\nscreen and must be entered manually as environment variables into Heroku so that the\r\napplication can find them when it starts.\r\n\r\n#### Save to version control\r\n\r\nThis configuration file should be checked into the source code control system.\r\nIt does Not include the Symmetric Encryption keys.\r\n\r\n## Using in non-Rails environments\r\n\r\nSymmetricEncryption can also be used in non-Rails environment.\r\n\r\nInstall SymmetricEncryption\r\n\r\n    gem install symmetric-encryption\r\n\r\nManually create a symmetric-encryption.yml configuration file based on the\r\none supplied in examples/symmetric-encryption.yml.\r\n\r\nAt application startup, run the code below to initialize symmetric-encryption prior to\r\nattempting to encrypt or decrypt any data\r\n\r\n```ruby\r\nrequire 'symmetric-encryption'\r\nSymmetricEncryption.load!('config/symmetric-encryption.yml', 'production')\r\n```\r\n\r\nParameters:\r\n\r\n* Filename of the configuration file created above\r\n* Name of the environment to load the configuration for\r\n\r\nTo manually generate the symmetric encryption keys, run the code below\r\n\r\n```ruby\r\nrequire 'symmetric-encryption'\r\nSymmetricEncryption.generate_symmetric_key_files('config/symmetric-encryption.yml', 'production')\r\n```\r\n\r\nParameters:\r\n\r\n* Filename of the configuration file created above\r\n* Name of the environment to load the configuration for\r\n\r\n## Supporting Multiple Encryption Keys\r\n\r\nAccording to the PCI Compliance documentation: \"Cryptographic keys must be changed on an annual basis.\"\r\n\r\nDuring the transition period of moving from one encryption key to another\r\nsymmetric-encryption supports multiple Symmetric Encryption keys. If decryption\r\nwith the current key fails, any previous keys will also be tried automatically.\r\n\r\nBy default the latest key is used for encrypting data. Another key can be specified\r\nfor encryption so that old data can be looked in queries, etc.\r\n\r\nSince just the Symmetric Encryption keys are being changed, we can still continue to\r\nuse the same RSA Private key for gaining access to the Symmetric Encryption Keys\r\n\r\n### Configuring multiple Symmetric Encryption keys\r\n\r\nCreate a configuration file in config/symmetric-encryption.yml per the following example:\r\n\r\n```yaml\r\n#\r\n# Symmetric Encryption for Ruby\r\n#\r\n---\r\n# For the development and test environments the test symmetric encryption keys\r\n# can be placed directly in the source code.\r\n# And therefore no RSA private key is required\r\ndevelopment: &development_defaults\r\n  key:    1234567890ABCDEF1234567890ABCDEF\r\n  iv:     1234567890ABCDEF\r\n  cipher_name: aes-128-cbc\r\n\r\ntest:\r\n  <<: *development_defaults\r\n\r\nproduction:\r\n  # Since the key to encrypt and decrypt with must NOT be stored along with the\r\n  # source code, we only hold a RSA key that is used to unlock the file\r\n  # containing the actual symmetric encryption key\r\n  #\r\n  # Sample RSA Key, DO NOT use this RSA key, generate a new one using\r\n  #    openssl genrsa 2048\r\n  private_rsa_key: |\r\n\t -----BEGIN RSA PRIVATE KEY-----\r\n\t MIIEpAIBAAKCAQEAxIL9H/jYUGpA38v6PowRSRJEo3aNVXULNM/QNRpx2DTf++KH\r\n\t 6DcuFTFcNSSSxG9n4y7tKi755be8N0uwCCuOzvXqfWmXYjbLwK3Ib2vm0btpHyvA\r\n\t qxgqeJOOCxKdW/cUFLWn0tACUcEjVCNfWEGaFyvkOUuR7Ub9KfhbW9cZO3BxZMUf\r\n\t IPGlHl/gWyf484sXygd+S7cpDTRRzo9RjG74DwfE0MFGf9a1fTkxnSgeOJ6asTOy\r\n\t fp9tEToUlbglKaYGpOGHYQ9TV5ZsyJ9jRUyb4SP5wK2eK6dHTxTcHvT03kD90Hv4\r\n\t WeKIXv3WOjkwNEyMdpnJJfSDb5oquQvCNi7ZSQIDAQABAoIBAQCbzR7TUoBugU+e\r\n\t ICLvpC2wOYOh9kRoFLwlyv3QnH7WZFWRZzFJszYeJ1xr5etXQtyjCnmOkGAg+WOI\r\n\t k8GlOKOpAuA/PpB/leJFiYL4lBwU/PmDdTT0cdx6bMKZlNCeMW8CXGQKiFDOcMqJ\r\n\t 0uGtH5YD+RChPIEeFsJxnC8SyZ9/t2ra7XnMGiCZvRXIUDSEIIsRx/mOymJ7bL+h\r\n\t Lbp46IfXf6ZuIzwzoIk0JReV/r+wdmkAVDkrrMkCmVS4/X1wN/Tiik9/yvbsh/CL\r\n\t ztC55eSIEjATkWxnXfPASZN6oUfQPEveGH3HzNjdncjH/Ho8FaNMIAfFpBhhLPi9\r\n\t nG5sbH+BAoGBAOdoUyVoAA/QUa3/FkQaa7Ajjehe5MR5k6VtaGtcxrLiBjrNR7x+\r\n\t nqlZlGvWDMiCz49dgj+G1Qk1bbYrZLRX/Hjeqy5dZOGLMfgf9eKUmS1rDwAzBMcj\r\n\t M9jnnJEBx8HIlNzaR6wzp3GMd0rrccs660A8URvzkgo9qNbvMLq9vyUtAoGBANll\r\n\t SY1Iv9uaIz8klTXU9YzYtsfUmgXzw7K8StPdbEbo8F1J3JPJB4D7QHF0ObIaSWuf\r\n\t suZqLsvWlYGuJeyX2ntlBN82ORfvUdOrdrbDlmPyj4PfFVl0AK3U3Ai374DNrjKR\r\n\t hF6YFm4TLDaJhUjeV5C43kbE1N2FAMS9LYtPJ44NAoGAFDGHZ/E+aCLerddfwwun\r\n\t MBS6MnftcLPHTZ1RimTrNfsBXipBw1ItWEvn5s0kCm9X24PmdNK4TnhqHYaF4DL5\r\n\t ZjbQK1idEA2Mi8GGPIKJJ2x7P6I0HYiV4qy7fe/w1ZlCXE90B7PuPbtrQY9wO7Ll\r\n\t ipJ45X6I1PnyfOcckn8yafUCgYACtPAlgjJhWZn2v03cTbqA9nHQKyV/zXkyUIXd\r\n\t /XPLrjrP7ouAi5A8WuSChR/yx8ECRgrEM65Be3qBEtoGCB4AS1G0NcigM6qhKBFi\r\n\t VS0aMXr3+V8argcUIwJaWW/x+p2go48yXlJpLHPweeXe8mXEt4iM+QZte6p2yKQ4\r\n\t h9PGQQKBgQCqSydmXBnXGIVTp2sH/2GnpxLYnDBpcJE0tM8bJ42HEQQgRThIChsn\r\n\t PnGA91G9MVikYapgI0VYBHQOTsz8rTIUzsKwXG+TIaK+W84nxH5y6jUkjqwxZmAz\r\n\t r1URaMAun2PfAB4g2N/kEZTExgeOGqXjFhvvjdzl97ux2cTyZhaTXg==\r\n\t -----END RSA PRIVATE KEY-----\r\n\r\n  # List Symmetric Key files in the order of current / latest first\r\n  ciphers:\r\n\t -\r\n\t\t# Filename containing Symmetric Encryption Key encrypted using the\r\n\t\t# RSA public key derived from the private key above\r\n\t\tkey_filename: /etc/rails/.rails.key\r\n\t\tiv_filename:  /etc/rails/.rails.iv\r\n\r\n\t\t# Encryption cipher_name\r\n\t\t#   Recommended values:\r\n\t\t#      aes-256-cbc\r\n\t\t#         256 AES CBC Algorithm. Very strong\r\n\t\t#         Ruby 1.8.7 MRI Approximately 100,000 encryptions or decryptions per second\r\n\t\t#         JRuby 1.6.7 with Ruby 1.8.7 Approximately 22,000 encryptions or decryptions per second\r\n\t\t#      aes-128-cbc\r\n\t\t#         128 AES CBC Algorithm. Less strong.\r\n\t\t#         Ruby 1.8.7 MRI Approximately 100,000 encryptions or decryptions per second\r\n\t\t#         JRuby 1.6.7 with Ruby 1.8.7 Approximately 22,000 encryptions or decryptions per second\r\n\t\tcipher_name:  aes-256-cbc\r\n\r\n\t -\r\n\t\t# OPTIONAL:\r\n\t\t#\r\n\t\t# Any previous Symmetric Encryption Keys\r\n\t\t#\r\n\t\t# Only used when old data still exists that requires old decryption keys\r\n\t\t# to be used\r\n\t\tkey_filename: /etc/rails/.rails_old.key\r\n\t\tiv_filename:  /etc/rails/.rails_old.iv\r\n\t\tcipher_name:  aes-256-cbc\r\n```\r\n\r\n## New features in V1.1 and V2\r\n\r\n* Ability to randomly generate a new initialization vector (iv) with every\r\n  encryption and put the iv in the encrypted data as its header, without having\r\n  to use SymmetricEncryption::Writer\r\n\r\n* With file encryption randomly generate a new key and initialization vector (iv) with every\r\n  file encryption and put the key and iv in the encrypted data as its header which\r\n  is encrypted using the global key and iv\r\n\r\n* Support for compression via SymmetricEncryption.encrypt, attr_encrypted and Mongoid\r\n  fields\r\n\r\n* SymmetricEncryption.encrypt has two additional optional parameters:\r\n```\r\n   random_iv [true|false]\r\n     Whether the encypted value should use a random IV every time the\r\n     field is encrypted.\r\n     It is recommended to set this to true where feasible. If the encrypted\r\n     value could be used as part of a SQL where clause, or as part\r\n     of any lookup, then it must be false.\r\n     Setting random_iv to true will result in a different encrypted output for\r\n     the same input string.\r\n     Note: Only set to true if the field will never be used as part of\r\n       the where clause in an SQL query.\r\n     Note: When random_iv is true it will add a 8 byte header, plus the bytes\r\n       to store the random IV in every returned encrypted string, prior to the\r\n       encoding if any.\r\n     Default: false\r\n     Highly Recommended where feasible: true\r\n\r\n   compress [true|false]\r\n     Whether to compress str before encryption\r\n     Should only be used for large strings since compression overhead and\r\n     the overhead of adding the 'magic' header may exceed any benefits of\r\n     compression\r\n     Note: Adds a 6 byte header prior to encoding, only if :random_iv is false\r\n     Default: false\r\n```\r\n\r\n## Upgrading from earlier versions to SymmetricEncryption V3\r\n\r\nIn version 3 of SymmetricEncryption, the following changes have been made that\r\nmay have backward compatibility issues:\r\n\r\n* SymmetricEncryption.decrypt no longer rotates through all the decryption keys\r\n  when previous ciphers fail to decrypt the encrypted string.\r\n  In a very small, yet significant number of cases it was possible to decrypt data\r\n  using the incorrect key. Clearly the data returned was garbage, but it still\r\n  returned a string of data instead of throwing an exception.\r\n  See SymmetricEncryption.select_cipher to supply your own custom logic to\r\n  determine the correct cipher to use when the encrypted string does not have a\r\n  header and multiple ciphers are defined.\r\n\r\n* Configuration file format prior to V1 is no longer supported\r\n\r\n* New configuration option has been added to support setting encryption keys\r\n  from environment variables\r\n\r\n* Cipher.parse_magic_header! now returns a Struct instead of an Array\r\n\r\n* New config options :encrypted_key and :encrypted_iv to support setting\r\n  the encryption key in environment variables\r\n\r\nMeta\r\n----\r\n\r\n* Code: `git clone git://github.com/reidmorrison/symmetric-encryption.git`\r\n* Home: <https://github.com/reidmorrison/symmetric-encryption>\r\n* Issues: <http://github.com/reidmorrison/symmetric-encryption/issues>\r\n* Gems: <http://rubygems.org/gems/symmetric-encryption>\r\n\r\nThis project uses [Semantic Versioning](http://semver.org/).\r\n\r\nAuthor\r\n------\r\n\r\n[Reid Morrison](https://github.com/reidmorrison)\r\n\r\nContributors\r\n------------\r\n\r\n* [M. Scott Ford](https://github.com/mscottford)\r\n* [Adam St. John](https://github.com/astjohn)\r\n\r\nLicense\r\n-------\r\n\r\nCopyright 2012, 2013, 2014 Reid Morrison\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\nDisclaimer\r\n----------\r\n\r\nAlthough this library has assisted in meeting PCI Compliance and has passed\r\nprevious PCI audits, it in no way guarantees that PCI Compliance will be\r\nachieved by anyone using this library.\r\n","google":"UA-52339082-3","note":"Don't delete this file! It's used internally to help with page regeneration."}